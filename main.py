#Student ID: 011057996, Michael Nadeau

import csv
from datetime import time, timedelta, datetime

class Package:
    """Represents a package with ID, address, city, state, zip code, delivery deadline, weight and special note
    attributes. Has methods for retrieving and setting package attributes.
    """

    def __init__(self, id, address, city, state, zip, delivery_deadline, weight, notes, delivery_status="at the hub"):
        """Creates a package with corresponding data members."""
        self._id = int(id)
        self._address = address
        self._city = city
        self._state = state
        self._zip = zip
        self._delivery_deadline = delivery_deadline
        self._weight = weight
        self._notes = notes
        self._delivery_status = delivery_status
        self._delivery_time = time()

    def get_id(self):
        """Returns the package ID."""

        return self._id

    def get_address(self):
        """Returns the package destination address."""

        return self._address

    def set_address(self, address):
        """Sets the package destination address."""

        self._address = address

    def get_city(self):
        """Returns the package destination city."""

        return self._city

    def get_state(self):
        """Returns the package destination state."""

        return self._state

    def get_zip(self):
        """Returns the package destination zip code."""

        return self._zip

    def get_delivery_deadline(self):
        """Returns the package delivery deadline."""

        return self._delivery_deadline

    def get_weight(self):
        """Returns the weight of the package."""

        return self._weight

    def get_notes(self):
        """Returns the special delivery notes for the package."""

        return self._notes

    def set_delivery_status(self, delivery_status):
        """Sets the delivery status for the package: at the hub, en route, or delivered with time."""
        self._delivery_status = delivery_status

    def get_delivery_status(self):
        """Returns the delivery status for the package: at the hub, en route, or delivered with time."""

        return self._delivery_status

    def set_delivery_time(self, time):
        """Sets the time of delivery."""

        self._delivery_time = time

    def get_delivery_time(self):
        """Returns the delivery time of the package."""

        return self._delivery_time

class PackageCollection:
    """
    Creates a package collection object, which consists of a hash table of package objects from the Package class.
    Package objects are generated by reading a csv file of package data and generating corresponding package objects.
    This hash table (self._package_collection) uses direct addressing, in which the keys are package object id numbers.
    More specifically, using a Python list, the keys have a one-to-one mapping with the list indices.

    Includes methods for returning the hash table (get_package_list()) and inserting a new package into the collection.
    The package insertion method, resizes the hash table, if necessary.

    Accessing this hash table has O(1) time complexity and O(N) space complexity for storing package data in the hash
    table.
    """

    def __init__(self):

        # Initialize the package collection by reading from CSV file.
        with open('WGUPS Package File.modified.csv', mode = 'r') as infile:
            packageFile = csv.reader(infile)
            max_package_id = 0

            # Find the maximum package id to determine size of the hast table.
            for line in packageFile:
                if int(line[0]) > max_package_id:
                    max_package_id = int(line[0])

            # Initialize the package collection, a hash table, with None values.
            self._package_collection = [None]*(max_package_id+1)

            # Populate the collection with package objects.
            with open('WGUPS Package File.modified.csv', mode='r') as infile:
                package_file = csv.reader(infile)
                for line in package_file:
                    package = Package(*line)
                    self._package_collection[package.get_id()] = package

    def get_package_list(self):
        """Method returns the hash table of package objects."""

        return self._package_collection

    def get_package_details(self, id):
        """Lookup function that retrieves package data from the hash table using the id argument. Package data is
         appended to a list. List of package details is returned by the method"""

        package_details_list = []
        package_details_list.append(self._package_collection[id].get_address())
        package_details_list.append(self._package_collection[id].get_delivery_deadline())
        package_details_list.append(self._package_collection[id].get_city())
        package_details_list.append(self._package_collection[id].get_zip())
        package_details_list.append(self._package_collection[id].get_weight())
        package_details_list.append(self._package_collection[id].get_delivery_status())

        return package_details_list


    def insert_package(self,id, address, city, state, zip, delivery_deadline, weight, notes, delivery_status):
        """Method inserts a new package into the hash table. If the id of the new package is outside the range of
        keys for the hash table, the hash table is resized accordingly."""

        id = int(id)

        # Resize the collection, a hash table, if the new package id exceeds the current range.
        if id > len(self._package_collection) - 1:
            new_package = Package(id, address, city, state, zip, delivery_deadline, weight, notes, delivery_status)
            new_package_collection = [None]*(id+1)

            # Copy existing packages to the new hash table.
            for index in range(len(self._package_collection)):
                new_package_collection[index] = self._package_collection[index]

            new_package_collection[id] = new_package
            self._package_collection = new_package_collection

        else:
            # Add package withour resizing if within the range.
            new_package = Package(id, address, city, state, zip, delivery_deadline, weight, notes, delivery_status)
            self._package_collection[id] = new_package



class Truck:
    """
    Creates a truck object with id, delivery mileage, load weight, departure time, truck time, and package list
    attributes. The package list attribute contains package objects from the Package class.

    Includes methods for returning attributes, adding package objects to the package list attribute and incrementing the truck object's
    mileage.
    """

    def __init__(self, id):
        #Initialize truck attributes.
        self._id = id
        self._delivery_mileage = 0
        self._load_weight = 0
        self._truck_departure_time = time()
        self._truck_time = time()
        self._package_list = []

    def get_id(self):
        """Returns the truck's id."""

        return self._id

    def get_delivery_mileage(self):
        """Returns the truck's delivery mileage."""

        return self._delivery_mileage

    def get_load_weight(self):
        """Returns the truck's load weight."""

        return self._load_weight

    def get_truck_time(self):
        """Returns the truck's time."""

        return self._truck_time

    def set_depart_time(self, hours, minutes):
        """Sets the time that the truck will depart."""

        self._truck_departure_time = time(hours,minutes)
        self._truck_time = time(hours, minutes)

    def get_depart_time(self):
        """Returns the time that the truck will depart."""

        return self._truck_departure_time

    def set_time(self, time):
        """Sets the time for the truck."""
        self._truck_time = time

    def get_package_list(self):
        """Returns the package list of package objects."""

        return self._package_list

    def add_package(self, package_object):
        """Adds a package to the truck's package list attribute. Also increments the truck's load weight accordingly."""

        # Check if the truck can still load more packages (max 16).
        if len(self._package_list) < 16:
            weight = int(package_object.get_weight())
            self._load_weight += weight

            self._package_list.append(package_object)
        else:
            print("Truck is full.")

    def track_mileage(self, miles):
        """Increments the truck's mileage over the course of deliveries during a business day."""

        self._delivery_mileage += miles


class DeliveryHub:
    """
    Creates a delivery hub object that includes distance table, package collection, truck list, time, and total truck
    distance attributes. Upon instantiation, truck objects are created from the Truck class and package objects from
    the hash table in the Package Collection class are loaded on specific trucks.

    The distance table attribute is generated by reading a csv file of distances between addresses and creating a
    weighted adjacency matrix using embedded Python lists. The package collection is an object from the Package
    Collection class, which is a hash table of package objects. The truck list is a list of truck objects from the
    Truck class.

    Includes methods for returning attributes, retrieving truck object attributes, retrieving package object attributes,
    adding package objects to the package collection, and finding the minimum distance, using the distance table,
    between a location and delivery addresses for package objects on a truck. Also, includes a method for delivering
    packages, which updates the mileage traveled by trucks and the delivery status of packages.

    The distance table has O(N^2) space complexity and can be accessed with O(1) time complexity. The delivery algorithm,
    which consists of the deliver() method and min_distance() function, has O(N^2) time complexity and O(N)
    space complexity.
    """

    def __init__(self):
        #Initialize the delivery hub attributes.
        self._distance_table = []
        self._package_collection = PackageCollection()
        self._truck_list = []
        self._time = time(8,0)  #Starting time, beginning of business day, is 8:00 AM.
        self._total_truck_distance = 0   #Total distance traveled by all trucks.

        # Load distance data from CSV file into the distance table, a weighted adjacency matrx.
        with open("WGUPS Distance Table.modified.csv", mode='r') as infile:
            distance_file = csv.reader(infile)
            line_count = 0
            for line in distance_file:
                line_count += 1
                self._distance_table.append(line)

        # Fill in the symmetric part of the distance table (since distance from A to B is the same as B to A)
        row = 0
        for index in range(line_count - 2):
            row += 1
            column = index + 3
            for element_number in range(line_count - row - 1):
                self._distance_table[row][column] = self._distance_table[column - 1][row + 1]
                column += 1

        #Initialize truck objects and load them with package objects. Once loaded, appended to the truck list.

        truck_one = Truck(1)
        truck_one.set_depart_time(8,0)
        truck_one.add_package(self._package_collection.get_package_list()[1])
        truck_one.add_package(self._package_collection.get_package_list()[13])
        truck_one.add_package(self._package_collection.get_package_list()[14])
        truck_one.add_package(self._package_collection.get_package_list()[15])
        truck_one.add_package(self._package_collection.get_package_list()[16])
        truck_one.add_package(self._package_collection.get_package_list()[19])
        truck_one.add_package(self._package_collection.get_package_list()[20])
        truck_one.add_package(self._package_collection.get_package_list()[23])
        truck_one.add_package(self._package_collection.get_package_list()[27])
        truck_one.add_package(self._package_collection.get_package_list()[29])
        truck_one.add_package(self._package_collection.get_package_list()[30])
        truck_one.add_package(self._package_collection.get_package_list()[31])
        truck_one.add_package(self._package_collection.get_package_list()[34])
        truck_one.add_package(self._package_collection.get_package_list()[37])
        truck_one.add_package(self._package_collection.get_package_list()[40])
        self._truck_list.append(truck_one)

        truck_two = Truck(2)
        truck_two.set_depart_time(9,5)
        self._package_collection.get_package_list()[9].set_address("410 S State St")
        truck_two.add_package(self._package_collection.get_package_list()[9])
        truck_two.add_package(self._package_collection.get_package_list()[3])
        truck_two.add_package(self._package_collection.get_package_list()[6])
        truck_two.add_package(self._package_collection.get_package_list()[18])
        truck_two.add_package(self._package_collection.get_package_list()[24])
        truck_two.add_package(self._package_collection.get_package_list()[25])
        truck_two.add_package(self._package_collection.get_package_list()[26])
        truck_two.add_package(self._package_collection.get_package_list()[28])
        truck_two.add_package(self._package_collection.get_package_list()[33])
        truck_two.add_package(self._package_collection.get_package_list()[35])
        truck_two.add_package(self._package_collection.get_package_list()[36])
        truck_two.add_package(self._package_collection.get_package_list()[38])
        self._truck_list.append(truck_two)

        truck_three = Truck(3)
        truck_three.set_depart_time(11,30)
        truck_three.add_package(self._package_collection.get_package_list()[2])
        truck_three.add_package(self._package_collection.get_package_list()[4])
        truck_three.add_package(self._package_collection.get_package_list()[5])
        truck_three.add_package(self._package_collection.get_package_list()[7])
        truck_three.add_package(self._package_collection.get_package_list()[8])
        truck_three.add_package(self._package_collection.get_package_list()[10])
        truck_three.add_package(self._package_collection.get_package_list()[11])
        truck_three.add_package(self._package_collection.get_package_list()[12])
        truck_three.add_package(self._package_collection.get_package_list()[17])
        truck_three.add_package(self._package_collection.get_package_list()[21])
        truck_three.add_package(self._package_collection.get_package_list()[22])
        truck_three.add_package(self._package_collection.get_package_list()[32])
        truck_three.add_package(self._package_collection.get_package_list()[39])
        self._truck_list.append(truck_three)


    def get_distance_table(self):
        """Returns the distance table, a weighted adjacency matrix for potential delivery addresses"""

        return self._distance_table

    def get_package_log(self):
        """Returns the hash table of package objects."""

        return self._package_collection.get_package_list()

    def get_package_information(self, id):
        """Prints the attribute data for a specific package object using its id."""

        if id > len(self._package_collection.get_package_list())-1 or self._package_collection.get_package_list()[id]==None :
            print ("ID not found.\n")

        else:
            # Retrieve package information and print.
            print(f"Package ID Number: {self._package_collection.get_package_list()[id].get_id()} \n"
                f"Package Delivery Address: {self._package_collection.get_package_list()[id].get_address()}\n"
                f"Package Delivery City: {self._package_collection.get_package_list()[id].get_city()}\n"
                f"Package Delivery Zip Code: {self._package_collection.get_package_list()[id].get_zip()}\n"
                f"Package Weight: {self._package_collection.get_package_list()[id].get_weight()}\n"
                f"Package Delivery Status: {self._package_collection.get_package_list()[id].get_delivery_status()}\n")

    def add_package(self, id, address, city, state, zip, delivery_deadline, weight, notes, delivery_status="hub"):
        """Inserts a package into the package collection hash table."""

        self._package_collection.insert_package(id, address, city, state, zip, delivery_deadline, weight, notes, delivery_status)

    def get_truck_list(self):
        """Returns the list of delivery trucks."""

        return self._truck_list

    def get_total_truck_distance(self):
        """Returns the total distance traveled by the delivery trucks over the course of the business day."""

        return self._total_truck_distance

    def get_truck_information(self, id):
        """Prints the attribute data for a specific truck object using its id."""

        id = int(id)
        for truck in self._truck_list:
            if truck.get_id() == id:
                print(f"Truck ID: {id}\n"
                      f"Delivery Mileage: {round(truck.get_delivery_mileage(),1)}\n"
                      f"Load Weight Carried: {truck.get_load_weight()}\n"
                      f"Departure Time: {truck.get_depart_time()}\n"
                      f"Delivery End Time: {truck.get_truck_time()}\n", end = "")
                print("Delivered Package IDs:", end = " ")
                for package in truck.get_package_list():
                    print(package.get_id(), end = " | ")
                print("\n")


    def deliver(self):
        """Delivers package objects associated with specific truck objects from the truck list.

        Generates a set of column numbers from the distance table using the destination addresses of packages
        for a specific truck. Identifies the nearest neighbor by using the min_distance() method, comparing
        the distances from current location of the truck to destination addresses represented by the address column set.
        Once the nearest neighbor is identified, the total distance of the truck is updated and, using the truck's speed
        of 18 mph or 0.3 miles per minute,the distance to the next destination is converted into a new time.
        The time attribute for the truck object and the delivery status for the package object is updated accordingly.

        At the end of the method's single loop,the truck object's new location is updated and the value is removed from
        the address column set-- it's no longer a destination. Once the address_column_set is empty, the algorithm's
        loop finishes, and if it's the first truck in the list, the truck object returns to the delivery hub,
        updating the distance and time accordingly.

        This method has O(N^2) time complexity and O(N) space complexity."""

        for truck_object in self._truck_list:

            # Initialize address column set, which represents destination addresses, for the packages on the truck.
            address_column_set = set()

            # Initialize the total distance for the truck
            distance = 0

            # Set all packages on the truck to "en route"
            for package in truck_object.get_package_list():
                package.set_delivery_status("en route")
                for address in self._distance_table[0]:
                    if package.get_address() in address:
                        column_index = self._distance_table[0].index(address) + 2
                        address_column_set.add(column_index)

            # Starting point of delivery (hub location)
            location = 2

            while len(address_column_set) > 0:
                # Find the nearest destination using the min_distance() method.
                route_tuple = self.min_distance(location,address_column_set)
                location = route_tuple[0]
                leg_distance = route_tuple[1]

                #Update truck mileage and total mileage for all trucks.
                truck_object.track_mileage(leg_distance)
                distance += leg_distance
                self._total_truck_distance += leg_distance

                #Calculate the time taken for this delivery leg and update the truck's current time
                travel_time_minutes= int(leg_distance/0.3) # Truck speed: 0.3 miles per minute.
                passed_time = timedelta(minutes = travel_time_minutes)
                date_time = datetime.combine(datetime.today(), truck_object.get_truck_time())
                new_time = date_time + passed_time   #update time for truck by adding travel time to previous time.
                truck_object.set_time(new_time.time())

                #Update current address location of truck.
                origin_address = self._distance_table[0][location-2]

                #Mark delivered packages with delivery time.
                for package in truck_object.get_package_list():
                    if package.get_address() in origin_address:
                        package.set_delivery_time(truck_object.get_truck_time())
                        package.set_delivery_status(f"delivered at {truck_object.get_truck_time()}")

                #Remove delivered address from destination address set.
                address_column_set.remove(location)

            # Return truck to the hub if it's the first truck.
            if truck_object == self._truck_list[0]:
                distance_to_hub = float(self._distance_table[location-1][2])
                distance += distance_to_hub
                self._total_truck_distance += distance_to_hub
                truck_object.track_mileage(distance_to_hub)

                travel_time_minutes = int(distance_to_hub/ 0.3)
                passed_time = timedelta(minutes=travel_time_minutes)
                date_time = datetime.combine(datetime.today(), truck_object.get_truck_time())
                new_time = date_time + passed_time
                truck_object.set_time(new_time.time())



    def min_distance(self, location_index, address_column_set):
        """
        Determines the smallest distance between a location and possible destinations, represented by the
        address column set. The smallest distance is determined using the distance table,
        a weighted adjacency matrix.

        Returns a route tuple which consists of the index for the nearest destination to
        the current location index and the distance between the current location and nearest destination.
        """

        #Set initial minimum distance to infinity.
        min_distance = float('inf')

        # For a specific row in the distance table (location index - 1),
        # which correlates to the truck's current location, iterate through destination addresses,
        # columns in the distance table, to find the closest destination address.
        for address_column in address_column_set:
            if float(self._distance_table[location_index - 1][address_column]) < min_distance:
                min_distance = float(self._distance_table[location_index - 1][address_column])
                min_index = address_column

        # Store destination index for nearest neighbor and distance in a tuple and return.
        route_tuple = (min_index,min_distance)
        return route_tuple


#Instantiate the delivery hub.
WGUPS = DeliveryHub()

menu_input = 0

# Start the delivery process.
WGUPS.deliver()

# Display the menu and handle user input.
while(menu_input != "5"):
    print("\n")
    print("WGUPS Delivery System Menu\n"
          "Make one of the following selections:\n"
          "1. Display the status of every package at the end of the day, along with total truck mileage. \n"
          "2. Display the status of a single package at a specific time.\n"
          "3. Display the status of all packages at a specific time. \n"
          "4. Display the status of the trucks at the end of the day. \n"
          "5. Exit the program. \n")
    menu_input = input(": ")

    if menu_input == "1":
        # Display the status of all packages and total truck mileage at the end of the business day.
        print("\n")
        print("Package ID, Address, City, State, Zip, Delivery Deadline, Weight (kg), Notes, Delivery Status")
        package_log = WGUPS.get_package_log()

        # Retrieve and print the truck the package is on and the package information for each
        # package object in the hash table.
        for package in package_log:
            if package is not None:
                for truck in WGUPS.get_truck_list():
                    if package in truck.get_package_list():
                        truck_id = truck.get_id()
                print(f"{package.get_id()}, {package.get_address()}, {package.get_city()}, {package.get_state()}, "
                      f"{package.get_zip()}, {package.get_delivery_deadline()}, {package.get_weight()}, "
                      f"{package.get_notes()}, {package.get_delivery_status()} by truck {truck_id}")

        # Print the total distance the trucks have traveled.
        print(f"Total Distance: {round(WGUPS.get_total_truck_distance(),1)} miles")

    if menu_input == "2":
        # Display the status of a specific package at a specific time
        print("\n")
        package_log = WGUPS.get_package_log()

        # Handle user input of package id and time.
        package_id = int(input("Enter the package ID number: "))

        # Verify that this is a valid id.
        if package_id > len(package_log) - 1:
            print("Invalid ID")

        else:
            time_check = input("Enter time in the 24 hour format (hh:mm): ")
            time_list = time_check.split(":")
            time_check_hour = int(time_list[0])
            time_check_minutes = int(time_list[1])
            time_check_formatted = time(time_check_hour, time_check_minutes)

            # Find package and truck it is located on.

            package = package_log[package_id]
            for truck in WGUPS.get_truck_list():
                if package in truck.get_package_list():
                    truck_object = truck
                    truck_id = truck_object.get_id()

            # If time is earlier than the truck's departure time.
            if time_check_formatted < truck_object.get_depart_time():
                delivery_state = "at the hub on"

            # If time is between truck's departure time and package's delivery time.
            elif time_check_formatted < package.get_delivery_time():
                delivery_state = "en route on"

            # If time is after package's delivery time.
            else:
                delivery_state = package.get_delivery_status() + " by"
            print("\n")
            print("Package ID, Address, City, State, Zip, Delivery Deadline, Weight (kg), Notes, Delivery Status")
            print(f"{package.get_id()}, {package.get_address()}, {package.get_city()}, {package.get_state()}, "
                f"{package.get_zip()}, {package.get_delivery_deadline()}, {package.get_weight()}, "
                f"{package.get_notes()}, {delivery_state} truck {truck_id}")



    if menu_input == "3":
        # Display the status of all packages at a specific time.

        # Handle user input of time.
        time_check = input("Enter time in the 24 hour format (hh:mm): ")
        time_list = time_check.split(":")
        time_check_hour = int(time_list[0])
        time_check_minutes = int(time_list[1])
        time_check_formatted = time(time_check_hour, time_check_minutes)

        print("\n")
        print("Package ID, Address, City, State, Zip, Delivery Deadline, Weight (kg), Notes, Delivery Status")

        package_log = WGUPS.get_package_log()

        # Retrieve and print the truck the package is on and the package information for each
        # package object in the hash table.
        for package in package_log:
            if package is not None:
                for truck in WGUPS.get_truck_list():
                    if package in truck.get_package_list():
                        truck_id = truck.get_id()
                        truck_object = truck

                # If time is earlier than the truck's departure time.
                if time_check_formatted < truck_object.get_depart_time():
                    delivery_state = "at the hub on"

                # If time is between truck's departure time and package's delivery time.
                elif time_check_formatted < package.get_delivery_time():
                    delivery_state = "en route on"

                # If time is after package's delivery time.
                else:
                    delivery_state = package.get_delivery_status() + " by"

                print(f"{package.get_id()}, {package.get_address()}, {package.get_city()}, {package.get_state()}, "
                      f"{package.get_zip()}, {package.get_delivery_deadline()}, {package.get_weight()}, "
                      f"{package.get_notes()}, {delivery_state} truck {truck_id}")


    if menu_input == "4":
        # Display the status of trucks at the end of the day.
        print("\n")
        for truck_number in range(len(WGUPS.get_truck_list())):
            WGUPS.get_truck_information(truck_number + 1)












